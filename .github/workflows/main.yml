name: Build and Push MAAS Versions to ECR Public (Stable Tag Support)

on:
  schedule:
    - cron: '0 18 * * 0'
  workflow_dispatch:

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      stable: ${{ steps.set-matrix.outputs.stable }}
    steps:
      - name: Fetch active MAAS versions from Launchpad and find stable
        id: set-matrix
        run: |
          VERSIONS=$(curl -s https://api.launchpad.net/devel/maas/series | jq -r '.entries | map(select(.active)) | map(.name)')
          STABLE_VERSION=$(curl -s https://api.launchpad.net/devel/maas/series | jq -r '.entries | map(select(.status == "Current Stable Release")) | .[0].name')

          if [ -z "$STABLE_VERSION" ]; then
            echo "No stable version found!"
            exit 1
          fi

          MATRIX_JSON=$(echo "$VERSIONS" | jq -c '{version: .}')

          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
          echo "stable=$STABLE_VERSION" >> $GITHUB_OUTPUT

  build-and-push:
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        run: |
          aws ecr-public get-login-password --region us-east-1 | \
            docker login --username AWS --password-stdin public.ecr.aws

      - name: Get existing ECR Public image digest
        id: get-remote-digest
        run: |
          IMAGE_DIGEST=$(aws ecr-public describe-images \
            --repository-name maas \
            --image-ids imageTag=${{ matrix.version }} \
            --region us-east-1 \
            --query 'imageDetails[0].imageDigest' \
            --output text || echo "none")
          echo "existing_digest=$IMAGE_DIGEST" >> $GITHUB_OUTPUT

      - name: Build Docker Image (Multi-Arch) without push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: false
          load: false
          provenance: false
          build-args: |
            MAAS_VERSION=${{ matrix.version }}

      - name: Push Docker Image to ECR Public (version tag)
        if: steps.get-remote-digest.outputs.existing_digest != steps.build.outputs.digest
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.ECR_REPOSITORY }}:${{ matrix.version }}
          provenance: false
          build-args: |
            MAAS_VERSION=${{ matrix.version }}

      - name: Push Docker Image to ECR Public (stable tag)
        if: matrix.version == needs.generate-matrix.outputs.stable
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.ECR_REPOSITORY }}:stable
          provenance: false
          build-args: |
            MAAS_VERSION=${{ matrix.version }}

      - name: Log skipped image push
        if: steps.get-remote-digest.outputs.existing_digest == steps.build.outputs.digest
        run: echo "No changes detected for MAAS version ${{ matrix.version }}. Skipping push."
